import { IFramework } from './framework';
export declare type FrameworkMethodDecorator = (target: any, key: string, result?: any) => any;
export declare type FrameworkClassDecorator = (target: any) => any;
export declare function Controller(prefix?: string): FrameworkClassDecorator;
export declare function All(path: string): FrameworkMethodDecorator;
export declare function Get(path: string): FrameworkMethodDecorator;
export declare function Post(path: string): FrameworkMethodDecorator;
export declare function Put(path: string): FrameworkMethodDecorator;
export declare function Service(target: any, option?: any): any;
export declare function Middleware(target: any, option?: any): any;
export declare function Order(order: number): (target: any) => void;
export declare function Module(target: any, option?: any): any;
export declare function Aspect(option?: any): FrameworkClassDecorator;
export declare function Config(target: any, option?: any): any;
export declare function ModuleConfig(module: any, moduleOption?: any): (target: any, option?: any) => void;
export declare function Profile(env: string): FrameworkClassDecorator;
export declare function ResponseBody(target: any, key: string, result: any): any;
export declare function RequestHeader(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function Request(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function RequestBody(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function RequestForm(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function RequestQuery(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function RequestPath(name: string, option?: any): (target: any, key: string, index: number) => void;
export declare function Valid(rule: any): (target: any, key: string, index: number) => void;
export declare function Application(target: IFramework): void;
